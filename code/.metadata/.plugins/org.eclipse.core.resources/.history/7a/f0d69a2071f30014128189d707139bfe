'''
Based on the input "player_query_schema.json" and "player_extraction.json" files, 
build up player's elastic search index.

Then based on player's elastic search index, search player's information.

@author: Premier League Scout
'''

from elasticsearch import Elasticsearch
from elasticsearch import helpers

import json
import pprint
import time


def main():
    '''
    Player query module's main functionality. 
    Build up player's elastic search index, can also be used for unit test.
    '''
    
    query_search = playerSearch()
    
#     query_search.build_elasticsearch_index()
    
#     multi_field_query = {
# #                         'name': 'Li',
#                         'birth_place': 'england',
# #                         'birth_year': (1900, 1995)
#                          }
#     rst = query_search.q_multi_field(multi_field_query)
    
    intro_query_string = 'born'
    rst = query_search.q_intro(intro_query_string)
    
    query_search.print_out_search_result(rst)


class playerSearch:
    
    def __init__(self):
        self.es = Elasticsearch()
        self.player_numb = 3546 # Total number of players from the corpus
    
    
    def build_elasticsearch_index(self):
        '''Build up elastic search index from the "player_query_schema.json" and "player_extraction.json" files'''
        
        # Build up schema
        with open('player_query_schema.json', 'rU') as schema_file:
            if self.es.indices.exists(index='players_index'):
                self.es.indices.delete(index='players_index')
                
            self.es.indices.create(index='players_index', body=schema_file.read())
        
        # Build up index
        with open('player_extraction.json', 'rU') as dict_file:
            root_dict = json.load(dict_file)
                
        players = []
        for player in root_dict.values():
            p = {
                '_index': 'players_index',
                '_type': 'player',
                '_source': {
                            'name': player['name'],
                            'height': player['height'],
                            'intro': player['intro'],
                            'birth_place': player['birth_place'],
                            'position': player['position'],
                            'birth_year': player['birth_year']
                            }
                }
            
            players.append(p)
            
        helpers.bulk(self.es, players)
        
        # Gives server some time to build up index
        time.sleep(3)
    
    
    def process_result_list(self, raw_rst):
        processed_rst = []
        for tmp in raw_rst:
            processed_rst.append(tmp['_source'])
        
        return processed_rst
    
    def print_out_search_result(self, rst):
        '''Print out each elastic search results list'''
        
        if len(rst) == 0:
            print 'Search miss'
            return
        
        print 'Search hits number:', len(rst), '\n'
        
        # Print out top 10 search hits
        pp = pprint.PrettyPrinter(indent=4)
        for i in range(0, 10):
            if i >= len(rst):
                break
            
            print 'Search Hit:', i + 1  # Search Hit number is in 1-based index
            pp.pprint(rst[i])
            print
    
    
    def q_multi_field(self, multi_field_query):
        '''
        Input "multi_field_query" should be a dictionary, which might contain below key-value pairs:
            1). key: "name"; value: string query
            2). key: "birth_place"; value: string query
            3). key: "position"; value: string query
            4). key: "height"; value: a tuple of 2 float values (e.g. (1.68, 1.80))
            5). key: "birth_year"; value: a tuple of 2 positive integers (e.g. (1960, 1990))
        '''
        
        query_list = []
        
        for idx in multi_field_query:
            if idx == 'height' or idx == 'birth_year':
                query = {
                         'range': { 
                                   idx: {
                                         'gte' : multi_field_query[idx][0],
                                         'lte' : multi_field_query[idx][1]
                                         }
                                   }
                         }
                query_list.append(query)
            else:
                query = {
                         'match': {
                                   idx: multi_field_query[idx]
                                   }
                         }
                query_list.append(query)
        
        final_query = {
                       'query': {
                                 'bool': {
                                          'must': query_list
                                          }
                                 }
                       }
        rst = self.es.search(index='players_index', body=final_query, size = self.player_numb)
        return self.process_result_list(rst['hits']['hits'])
    
    
    def q_intro(self, intro_query_string):
        '''Return the intro_query_string's corresponding player introduction information.'''
        
        query = {
                 'query': {
                            'match': {
                                       'intro': intro_query_string
                                     }
                          }
                }
        rst = self.es.search(index='players_index', body=query, size = self.player_numb)
        return self.process_result_list(rst['hits']['hits'])
    
    
if __name__ == '__main__':
    main()